apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-sql
data:
  init-db.sh: |
    #!/bin/bash
    set -e
    echo "Running initialization scripts..."
    psql -U postgres -f /docker-entrypoint-initdb.d/10-create-user.sql
    psql -U postgres -f /docker-entrypoint-initdb.d/20-create-databases.sh
    psql -U postgres -f /docker-entrypoint-initdb.d/30-create-table.sql
    psql -U postgres -f /docker-entrypoint-initdb.d/40-insert-data.sql
    echo "Database initialization complete."

  10-create-user.sql: |
    CREATE ROLE program WITH PASSWORD 'test';
    ALTER ROLE program WITH LOGIN;

  20-create-databases.sh: |
    #!/usr/bin/env bash
    set -e
    export VARIANT="v2"
    export SCRIPT_PATH=/docker-entrypoint-initdb.d/
    export PGPASSWORD=postgres
    psql -f "$SCRIPT_PATH/scripts/db-$VARIANT.sql"

  30-create-table.sql: |
    \connect reservations;
    CREATE TABLE hotels (
        id SERIAL PRIMARY KEY,
        hotel_uid uuid NOT NULL UNIQUE,
        name VARCHAR(255) NOT NULL,
        country VARCHAR(80) NOT NULL,
        city VARCHAR(80) NOT NULL,
        address VARCHAR(255) NOT NULL,
        stars INT,
        price INT NOT NULL
    );

    CREATE TABLE reservation (
        id SERIAL PRIMARY KEY,
        reservation_uid uuid UNIQUE NOT NULL,
        username VARCHAR(80) NOT NULL,
        payment_uid uuid NOT NULL,
        hotel_id INT REFERENCES hotels (id),
        status VARCHAR(20) NOT NULL CHECK (status IN ('PAID', 'CANCELED')),
        start_date TIMESTAMP WITH TIME ZONE,
        end_data TIMESTAMP WITH TIME ZONE
    );

    \connect payments;
    CREATE TABLE payment (
        id SERIAL PRIMARY KEY,
        payment_uid uuid NOT NULL,
        status VARCHAR(20) NOT NULL CHECK (status IN ('PAID', 'CANCELED')),
        price INT NOT NULL
    );

    \connect loyalties;
    CREATE TABLE loyalty (
        id SERIAL PRIMARY KEY,
        username VARCHAR(80) NOT NULL UNIQUE,
        reservation_count INT NOT NULL DEFAULT 0,
        status VARCHAR(80) NOT NULL DEFAULT 'BRONZE' CHECK (status IN ('BRONZE', 'SILVER', 'GOLD')),
        discount INT NOT NULL
    );

  40-insert-data.sql: |
    \connect reservations;
    INSERT INTO hotels (id, hotel_uid, name, country, city, address, stars, price)
    VALUES (1, '049161bb-badd-4fa8-9d90-87c9a82b0668', 'Ararat Park Hyatt Moscow', 'Россия', 'Москва', 'Неглинная ул., 4', 5, 10000);

    \connect loyalties;
    INSERT INTO loyalty (id, discount, reservation_count, username, status)
    VALUES (1, 10, 25, 'Test Max', 'GOLD');
