name: GitHub Classroom Workflow
on:
  push:
    branches: [ master ]
jobs:
  build:
    name: Autograding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: docker/setup-buildx-action@v2

      # TODO build, publish to docker hub, deploy to k8s



      #  1. Логин в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      #  2. Сборка и публикация образа

      - name: Build and Push PostgreSQL Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./postgres    # Путь к директории с Dockerfile
          push: true             # Публикуем образ в Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/my-postgres:latest




        #  Сборка и публикация образа
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./gateway
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/gateway:latest

      - name: Build and Push Reservation
        uses: docker/build-push-action@v4
        with:
          context: ./reservation
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/reservation:latest
  
      - name: Build and Push Payment
        uses: docker/build-push-action@v4
        with:
          context: ./payment
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/payment:latest
    
      - name: Build and Push Payment
        uses: docker/build-push-action@v4
        with:
          context: ./loyalty
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/loyalty:latest


      #  3. Установка kubectl и helm
      - name: Install kubectl and helm
        run: |
          sudo apt-get update && sudo apt-get install -y kubectl
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Настройка подключения к Timeweb Kubernetes
      - name: Configure Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 --decode > ~/.kube/config || echo "Base64 decode failed"
          cat ~/.kube/config || echo "Kubeconfig file is empty"
          chmod 600 ~/.kube/config
          export KUBECONFIG=~/.kube/config

      - name: Debug Kubeconfig
        run: cat ~/.kube/config  



      #  5. Установка Nginx Ingress Controller
      - name: Install Nginx Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace kube-system


      #  3. Деплой в Kubernetes

      - name: Create Kubernetes Namespace
        run: |
          kubectl create namespace ${{ secrets.K8S_NAMESPACE }} || echo "Namespace already exists"


      - name: database
        run: |
          helm uninstall postgres --namespace ${{ secrets.K8S_NAMESPACE }}
          helm upgrade --install postgres helm-chart/ \
          --namespace ${{ secrets.K8S_NAMESPACE }}



      - name: Wait for PostgreSQL to be ready
        run: |
          kubectl wait --for=condition=available --timeout=600s deployment/postgres -n ${{ secrets.K8S_NAMESPACE }}


      - name: Деплой gateway
        run: |
          helm upgrade --install gateway helm-chart/ \
            --namespace ${{ secrets.K8S_NAMESPACE }} \
            --set services.gateway.enabled=true \
            --set services.gateway.image.repository=${{ secrets.DOCKER_USERNAME }}/gateway \
            --set services.gateway.image.tag=latest

      - name: Deploy reservation
        run: |
          helm upgrade --install reservation helm-chart/ \
            --namespace ${{ secrets.K8S_NAMESPACE }} \
            --set serviceName=reservation \
            --set services.reservation.enabled=true \
            --set services.reservation.image.repository=${{ secrets.DOCKER_USERNAME }}/reservation \
            --set services.reservation.image.tag=latest
          
      - name: Deploy payment
        run: |
          helm upgrade --install payment helm-chart/ \
            --namespace ${{ secrets.K8S_NAMESPACE }} \
            --set serviceName=payment \
            --set services.payment.enabled=true \
            --set services.payment.image.repository=${{ secrets.DOCKER_USERNAME }}/payment \
            --set services.payment.image.tag=latest

      - name: Deploy loyalty
        run: |
          helm upgrade --install loyalty helm-chart/ \
            --namespace ${{ secrets.K8S_NAMESPACE }} \
            --set serviceName=loyalty \
            --set services.loyalty.enabled=true \
            --set services.loyalty.image.repository=${{ secrets.DOCKER_USERNAME }}/loyalty \
            --set services.loyalty.image.tag=latest
            
      - name: Проверка деплоя
        run: kubectl get pods -n ${{ secrets.K8S_NAMESPACE }}


      # 5. Запуск API тестов
      - name: Run API Tests
        uses: matt-ball/newman-action@master
        with:
          collection: v2/postman/collection.json
          environment: v2/postman/environment.json
          delayRequest: 100
          reporters: '[ "cli" ]'

      - uses: education/autograding@v1
        id: autograder
        continue-on-error: true
        